{"version":3,"file":"InputBasic.js","names":["_react","_interopRequireWildcard","require","_propTypes","_interopRequireDefault","_core","_inputValuePrefix","_useInputKeyDownHandler","_excluded","obj","__esModule","_getRequireWildcardCache","e","WeakMap","r","t","_typeof","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_extends","assign","bind","target","arguments","length","source","key","prototype","apply","_objectWithoutProperties","excluded","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","indexOf","propertyIsEnumerable","sourceKeys","keys","createInput","defaultMetadata","InputBasic","_ref","ref","value","onChange","onKeyDown","country","inputFormat","_ref$metadata","metadata","_ref$inputComponent","inputComponent","Input","international","withCountryCallingCode","rest","prefix","getPrefixForFormattingValueAsPhoneNumber","_onChange","useCallback","event","newValue","parseIncompletePhoneNumber","newValueFormatted","format","slice","_onKeyDown","useInputKeyDownHandler","createElement","React","forwardRef","propTypes","PropTypes","string","isRequired","func","oneOf","object","elementType","_default","exports","removePrefixFromFormattedPhoneNumber","formatIncompletePhoneNumber"],"sources":["../source/InputBasic.js"],"sourcesContent":["import React, { useCallback } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { parseIncompletePhoneNumber, formatIncompletePhoneNumber } from 'libphonenumber-js/core'\r\n\r\nimport { getPrefixForFormattingValueAsPhoneNumber, removePrefixFromFormattedPhoneNumber } from './helpers/inputValuePrefix.js'\r\n\r\nimport useInputKeyDownHandler from './useInputKeyDownHandler.js'\r\n\r\nexport function createInput(defaultMetadata) {\r\n\t/**\r\n\t * `InputBasic` is the most basic implementation of a `Component`\r\n\t * that can be passed to `<PhoneInput/>`. It parses and formats\r\n\t * the user's input but doesn't control the caret in the process:\r\n\t * when erasing or inserting digits in the middle of a phone number\r\n\t * the caret usually jumps to the end (this is the expected behavior).\r\n\t * Why does `InputBasic` exist when there's `InputSmart`?\r\n\t * One reason is working around the [Samsung Galaxy smart caret positioning bug]\r\n\t * (https://github.com/catamphetamine/react-phone-number-input/issues/75).\r\n\t * Another reason is that, unlike `InputSmart`, it doesn't require DOM environment.\r\n\t */\r\n\tfunction InputBasic({\r\n\t\tvalue,\r\n\t\tonChange,\r\n\t\tonKeyDown,\r\n\t\tcountry,\r\n\t\tinputFormat,\r\n\t\tmetadata = defaultMetadata,\r\n\t\tinputComponent: Input = 'input',\r\n\t\t//\r\n\t\t// The rest of the properties listed here are just to get the `rest` props\r\n\t\t// that will be passed to the DOM `<input/>` element.\r\n\t\t//\r\n\t\t// `international` property is deprecated and is not used.\r\n\t\tinternational,\r\n\t\t// `withCountryCallingCode` property is deprecated and is not used.\r\n\t\twithCountryCallingCode,\r\n\t\t...rest\r\n\t}, ref) {\r\n\t\tconst prefix = getPrefixForFormattingValueAsPhoneNumber({\r\n\t\t\tinputFormat,\r\n\t\t\tcountry,\r\n\t\t\tmetadata\r\n\t\t})\r\n\r\n\t\tconst _onChange = useCallback((event) => {\r\n\t\t\tlet newValue = parseIncompletePhoneNumber(event.target.value)\r\n\t\t\t// By default, if a value is something like `\"(123)\"`\r\n\t\t\t// then Backspace would only erase the rightmost brace\r\n\t\t\t// becoming something like `\"(123\"`\r\n\t\t\t// which would give the same `\"123\"` value\r\n\t\t\t// which would then be formatted back to `\"(123)\"`\r\n\t\t\t// and so a user wouldn't be able to erase the phone number.\r\n\t\t\t//\r\n\t\t\t// This issue is worked around with this simple hack:\r\n\t\t\t// when \"old\" and \"new\" parsed values are the same,\r\n\t\t\t// it checks if the \"new\" formatted value could be obtained\r\n\t\t\t// from the \"old\" formatted value by erasing some (or no) characters at the right side.\r\n\t\t\t// If it could then it's likely that the user has hit a Backspace key\r\n\t\t\t// and what they really intended was to erase a rightmost digit rather than\r\n\t\t\t// a rightmost punctuation character.\r\n\t\t\t//\r\n\t\t\tif (newValue === value) {\r\n\t\t\t\tconst newValueFormatted = format(prefix, newValue, country, metadata)\r\n\t\t\t\tif (newValueFormatted.indexOf(event.target.value) === 0) {\r\n\t\t\t\t\t// Trim the last digit (or plus sign).\r\n\t\t\t\t\tnewValue = newValue.slice(0, -1)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tonChange(newValue)\r\n\t\t}, [\r\n\t\t\tprefix,\r\n\t\t\tvalue,\r\n\t\t\tonChange,\r\n\t\t\tcountry,\r\n\t\t\tmetadata\r\n\t\t])\r\n\r\n\t\tconst _onKeyDown = useInputKeyDownHandler({\r\n\t\t\tonKeyDown,\r\n\t\t\tinputFormat\r\n\t\t})\r\n\r\n\t\treturn (\r\n\t\t\t<Input\r\n\t\t\t\t{...rest}\r\n\t\t\t\tref={ref}\r\n\t\t\t\tvalue={format(prefix, value, country, metadata)}\r\n\t\t\t\tonChange={_onChange}\r\n\t\t\t\tonKeyDown={_onKeyDown}/>\r\n\t\t)\r\n\t}\r\n\r\n\tInputBasic = React.forwardRef(InputBasic)\r\n\r\n\tInputBasic.propTypes = {\r\n\t\t/**\r\n\t\t * The parsed phone number.\r\n\t\t * \"Parsed\" not in a sense of \"E.164\"\r\n\t\t * but rather in a sense of \"having only\r\n\t\t * digits and possibly a leading plus character\".\r\n\t\t * Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n\t\t */\r\n\t\tvalue: PropTypes.string.isRequired,\r\n\r\n\t\t/**\r\n\t\t * A function of `value: string`.\r\n\t\t * Updates the `value` property.\r\n\t\t */\r\n\t\tonChange: PropTypes.func.isRequired,\r\n\r\n\t\t/**\r\n\t\t * A function of `event: Event`.\r\n\t\t * Handles `keydown` events.\r\n\t\t */\r\n\t\tonKeyDown: PropTypes.func,\r\n\r\n\t\t/**\r\n\t\t * A two-letter country code for formatting `value`\r\n\t\t * as a national phone number (e.g. `(800) 555 35 35`).\r\n\t\t * E.g. \"US\", \"RU\", etc.\r\n\t\t * If no `country` is passed then `value`\r\n\t\t * is formatted as an international phone number.\r\n\t\t * (e.g. `+7 800 555 35 35`)\r\n\t\t * This property should've been called `defaultCountry`\r\n\t\t * because it only applies when the user inputs a phone number in a national format\r\n\t\t * and is completely ignored when the user inputs a phone number in an international format.\r\n\t\t */\r\n\t\tcountry : PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * The format that the input field value is being input/output in.\r\n\t\t */\r\n\t\tinputFormat : PropTypes.oneOf([\r\n\t\t\t'INTERNATIONAL',\r\n\t\t\t'NATIONAL_PART_OF_INTERNATIONAL',\r\n\t\t\t'NATIONAL',\r\n\t\t\t'INTERNATIONAL_OR_NATIONAL'\r\n\t\t]).isRequired,\r\n\r\n\t\t/**\r\n\t\t * `libphonenumber-js` metadata.\r\n\t\t */\r\n\t\tmetadata: PropTypes.object,\r\n\r\n\t\t/**\r\n\t\t * The `<input/>` component.\r\n\t\t */\r\n\t\tinputComponent: PropTypes.elementType\r\n\t}\r\n\r\n\treturn InputBasic\r\n}\r\n\r\nexport default createInput()\r\n\r\nfunction format(prefix, value, country, metadata) {\r\n\treturn removePrefixFromFormattedPhoneNumber(\r\n\t\tformatIncompletePhoneNumber(\r\n\t\t\tprefix + value,\r\n\t\t\tcountry,\r\n\t\t\tmetadata\r\n\t\t),\r\n\t\tprefix\r\n\t)\r\n}"],"mappings":"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","ignoreList":[]}