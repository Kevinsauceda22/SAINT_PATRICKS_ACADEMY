{"version":3,"file":"useInputKeyDownHandler.js","names":["useCallback","useInputKeyDownHandler","_ref","onKeyDown","inputFormat","event","keyCode","BACKSPACE_KEY_CODE","target","HTMLInputElement","getCaretPosition","LEADING_PLUS","length","preventDefault","element","selectionStart"],"sources":["../source/useInputKeyDownHandler.js"],"sourcesContent":["import { useCallback } from 'react'\r\n\r\n// Returns a custom `onKeyDown` handler that works around a Backspace keypress edge case:\r\n// * `<PhoneInputWithCountrySelect international countryCallingCodeEditable={false}/>`\r\n// * When placing the caret before the leading plus character and pressing Backspace,\r\n//   it duplicates the country calling code in the `<input/>`.\r\n// https://github.com/catamphetamine/react-phone-number-input/issues/442\r\nexport default function useInputKeyDownHandler({\r\n\tonKeyDown,\r\n\tinputFormat\r\n}) {\r\n\treturn useCallback((event) => {\r\n\t\t// Usability:\r\n\t\t// Don't allow the user to erase a leading \"+\" character when \"international\" input mode is forced.\r\n\t\t// That indicates to the user that they can't possibly enter the phone number in a non-international format.\r\n\t\tif (event.keyCode === BACKSPACE_KEY_CODE && inputFormat === 'INTERNATIONAL') {\r\n\t\t\t// It checks `event.target` here for being an `<input/>` element\r\n\t\t\t// because \"keydown\" events may bubble from arbitrary child elements\r\n\t\t\t// so there's no guarantee that `event.target` represents an `<input/>` element.\r\n\t\t\t// Also, since `inputComponent` is not neceesarily an `<input/>`, this check is required too.\r\n\t\t\tif (event.target instanceof HTMLInputElement) {\r\n\t\t\t\tif (getCaretPosition(event.target) === LEADING_PLUS.length) {\r\n\t\t\t\t\tevent.preventDefault()\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (onKeyDown) {\r\n\t\t\tonKeyDown(event)\r\n\t\t}\r\n\t}, [\r\n\t\tonKeyDown,\r\n\t\tinputFormat\r\n\t])\r\n}\r\n\r\n// Gets the caret position in an `<input/>` field.\r\n// The caret position starts with `0` which means \"before the first character\".\r\nfunction getCaretPosition(element) {\r\n\treturn element.selectionStart\r\n}\r\n\r\nconst BACKSPACE_KEY_CODE = 8\r\n\r\nconst LEADING_PLUS = '+'"],"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;;AAEnC;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,sBAAsBA,CAAAC,IAAA,EAG3C;EAAA,IAFFC,SAAS,GAAAD,IAAA,CAATC,SAAS;IACTC,WAAW,GAAAF,IAAA,CAAXE,WAAW;EAEX,OAAOJ,WAAW,CAAC,UAACK,KAAK,EAAK;IAC7B;IACA;IACA;IACA,IAAIA,KAAK,CAACC,OAAO,KAAKC,kBAAkB,IAAIH,WAAW,KAAK,eAAe,EAAE;MAC5E;MACA;MACA;MACA;MACA,IAAIC,KAAK,CAACG,MAAM,YAAYC,gBAAgB,EAAE;QAC7C,IAAIC,gBAAgB,CAACL,KAAK,CAACG,MAAM,CAAC,KAAKG,YAAY,CAACC,MAAM,EAAE;UAC3DP,KAAK,CAACQ,cAAc,CAAC,CAAC;UACtB;QACD;MACD;IACD;IACA,IAAIV,SAAS,EAAE;MACdA,SAAS,CAACE,KAAK,CAAC;IACjB;EACD,CAAC,EAAE,CACFF,SAAS,EACTC,WAAW,CACX,CAAC;AACH;;AAEA;AACA;AACA,SAASM,gBAAgBA,CAACI,OAAO,EAAE;EAClC,OAAOA,OAAO,CAACC,cAAc;AAC9B;AAEA,IAAMR,kBAAkB,GAAG,CAAC;AAE5B,IAAMI,YAAY,GAAG,GAAG","ignoreList":[]}